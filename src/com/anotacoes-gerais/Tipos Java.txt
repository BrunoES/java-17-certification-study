O java entende Integer como int, porém a preferência é sempre pelo tipo Integer
e vice-versa.

--------------

Caso exista uma sobrecarga de método, com operadores float e Integer, o método seja chamado com um valor int, o método considerado será o float.

void aMethod(float argument) {
    System.out.println("Method B"); // Valor chega aqui como, 1.0
}

void aMethod(Integer argument) {
    System.out.println("Method C");
}

aMethod(1)

--------------

Caso um método int, seja inicializado com um caracter, o seu valor, será a representação numérica, se sua posição na tabela ASCII, por exemplo:

int number = 'A'; // number = 65
int number = 'a'; // number = 97

--------------

long e int são interpoláveis, de forma que um método que recebe long, pode também receber um parâmetro Int.

--------------

Caso exista uma sobrecarga de método que receba Long (tipo abstrato), e um outro que receba um tipo primitivo long, caso não seja passado
explicitamente um argumento declarado Long, o valor método considerado será o método que recebe o parâmetro primitivo.
O mesmo para: Float, Double, Integer...

--------------

byte b = 100; // Line 1
char c = b; // Line 2
short s = c; // Line 3
float f = s; // Line 4
long l = f; // Line 5
double d = l; // Line 6

Linhas 2, 3, e 5 erradas.

--------------
int com valores que começam com 0, são representados na forma octal, por exemplo:
int i = 070;
System.out.println(i);

saída: 56
--------------

int: 0b 0x

int i = 0b0011; // Representação binária de três;
int i = 0x01515 // Representação hexadecimal;

---------------

Isso é uma operação válida:

byte b = (byte) 'b'; // 98
b++; // 99
short s = b; // 99
System.out.println(s - 1); // 98

---------------

Valores float e double são printados com casa decimal