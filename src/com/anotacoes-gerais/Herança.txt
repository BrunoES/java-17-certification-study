Métodos staticos não podem ser overridend por métodos não estáticos, ou vice-versa.
Isso ocorre pois a referência de um método estático aponta para a Classe (Tipo), e não para o objeto.

Já um atributo static pode sem problemas ser "overrided" por um atributo não static de uma classe filha, e vice-versa.

Não é possível acessar atributos de uma classe através do 'super', exemplo: 'super.name'

--------------

O super. funciona apenas para acessar métodos da classe mãe logo acima, não é possível acessar métodos
de uma classe avó, por exemplo.

--------------

Caso uma classe herde um método que é sobrescrito na classe filha, este método será utilizado quando
o tipo do objeto é do tipo da sub classe, e não do tipo da classe mãe, por exemplo:

Foo foo = new Bar();
foo.print(); -- Printa Foo

Bar bar = new Bar();
bar.print(); -- Printa Bar

--------------

Um método que faz override em um método de uma classe mãe, só pode fazer override, se seu tipo de retorno for o mesmo, ou um subtipo
do tipo de retorno do método que está sendo sobrescrito.

--------------

Todo método abstrato definido em uma interface, ou classe abstrata, por padrão é público.
E todo método definido numa classe filha, como implementação, que não tenha modificador de acesso, é default.

Por tanto, se há um método abstrato definido sem modificador de acesso, seu método que o implementa, ou que o sobrescreve,
não pode reduzir este escopo de acesso, ou seja, não pode ser default, tem que ser public também (neste exemplo).

--------------

Uma classe filha pode ser declarada no mesmo arquivo (.java) da sua classe mãe.

--------------

Isso compila, e funciona:

String x = "hello";
try {
    throw new IOException(x = "good bye");
} catch (Exception e) {
    System.out.println(x);
}

'x' assume o valor "good bye", antes de cair no catch.

--------------

A implementação de um método herdado de uma classe mãe, é aceita como implementação de um método especificado em uma interface implementada pela classe filha.

Exemplo:
public class FooBar extends Bar implements Foo {

}

Onde Bar possui a implementação do método X, definido na interface Y.

--------------

Um trhows em um método overrider na classe filha, que lançe uma exeption de classe mais genérica do que o método pai que faz throws na classe mãe, não é um problema.
Exemplo: métodoX na classe mãe faz throws Exception
Exemplo: métodoX na classe fila faz throws SQLException
ou vice-versa.

--------------

Se uma classe abstrata implementa uma interface, caso ela não implemente o(s) métodos(s), uma de suas classes filhas terá de implementar, ex:

public abstract class Test implements Testes {
    // Pode ou não implementar o método da interface
}

--------------

Operador 'super' não pode ser utilizado em contexto static.

Ex:
	static void printName() {
		super.print(); // Line 2
		}
	}
	
--------------

Classe abstrata exige que um método seja abstrato seja implementado, como uma interface.

--------------

Ordem correta: extends Bar implements Foo

--------------