--------------

Declações válidas de matriz:
int[][] matrix2 = new int[2][];
int[][] matrix2 = new int[2][1];
Errado: Do lado esquerdo declarar
        Declarar quantidade de coluna sem declarar quantidade de linhas
        Não declarar nada

--------------

Declaração incorreta de arrys (array3):

Object[] array1 = new Object[]{"John", 30}; // Line 1
Object[] array2 = new Object[]{new int[][]{}}; // Line 2
Object[] array3 = new Object[1]{new Object()} ; // Line 3 Incorreto, pois não se pode fornecer um tamanho fixo para o array, quando inicializado.
Object[] array4 = new String[0]; // Line 4
Object[][] array5 = new Integer[][]{{}}; // Line 5

--------------

Retorna -1 Se não há incompatibilidade entre o conteúdo dos arrays, e se houver, retorna o índice da incompatibilidade.
Arrays.mismatch(array1, array2);
Arrays.mismatch(array1, indiceInicial, quantidadeDeElementos, array2, indiceInicial, quantidadeDeElementos);

indiceInicial: Só serão analisados elementos daqui em diante
quantidadeDeElementos: Quantidade de elementos do array que serão considerados (porém apenas a partir do indiceInicial);

String[] array1 = {"a", "b", "c"};
String[] array2 = {"c", "b", "c"};
int result = Arrays.mismatch(array1, 1, 2, array2, 1, 2);
System.out.println(result);

Exemplo: Este método acima retornará -1, mesmo "a" e "c" na posição 0 sendo incompatíveis, pois a análise só começa no índice 1,
o terceiro elemento também não foi considerado pois passamos apenas 2 na quantidadeDeElementos, e o primeiro não foi considerado.

--------------

Arrays.copyOf(array1, 1);
Copia o conteúdo de array1, definindo o novo tamanho do array em 1.
Caso 1 seja insuficiente, será lançada uma java.lang.ArrayIndexOutOfBoundsException

--------------

Arrays e MATRIZES começam do índice 0.

--------------

Isso compila:
int element = array[index = 1]++;

--------------


