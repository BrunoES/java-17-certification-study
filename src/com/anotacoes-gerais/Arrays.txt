--------------

Declações válidas de matriz:
int[][] matrix2 = new int[2][];
int[][] matrix2 = new int[2][1];
Errado: Do lado esquerdo declarar
        Declarar quantidade de coluna sem declarar quantidade de linhas
        Não declarar nada

--------------

Declaração incorreta de arrys (array3):

Object[] array1 = new Object[]{"John", 30}; // Line 1
Object[] array2 = new Object[]{new int[][]{}}; // Line 2
Object[] array3 = new Object[1]{new Object()} ; // Line 3 Incorreto, pois não se pode fornecer um tamanho fixo para o array, quando inicializado.
Object[] array4 = new String[0]; // Line 4
Object[][] array5 = new Integer[][]{{}}; // Line 5

Obs, no caso de matríz, não há problema inserir apenas uma posição, em vez das duas, por exemplo:
char[][] a = { { 'a' } };
--------------

Retorna -1 Se não há incompatibilidade entre o conteúdo dos arrays, e se houver, retorna o índice da incompatibilidade.
Arrays.mismatch(array1, array2);
Arrays.mismatch(array1, indiceInicial, quantidadeDeElementos, array2, indiceInicial, quantidadeDeElementos);

indiceInicial: Só serão analisados elementos daqui em diante
quantidadeDeElementos: Quantidade de elementos do array que serão considerados (porém apenas a partir do indiceInicial);

String[] array1 = {"a", "b", "c"};
String[] array2 = {"c", "b", "c"};
int result = Arrays.mismatch(array1, 1, 2, array2, 1, 2);
System.out.println(result);

Exemplo: Este método acima retornará -1, mesmo "a" e "c" na posição 0 sendo incompatíveis, pois a análise só começa no índice 1,
o terceiro elemento também não foi considerado pois passamos apenas 2 na quantidadeDeElementos, e o primeiro não foi considerado.

Não aceita por exemplo: mismatch(array1, arra2), onde array é o long e array 2 é Long, ou char e Character.
--------------

Arrays.copyOf(array1, 1);
Copia o conteúdo de array1, definindo o novo tamanho do array em 1.
Caso 1 seja insuficiente, será lançada uma java.lang.ArrayIndexOutOfBoundsException


Arrays.copyOf(array1, 1, 4);
Neste caso, o 4 é exclusive, ou seja, não faz parte do range.
Mesmo que não tenha 4 elementos, o retorno do copyOf será uma array preenchido com 0 onde não existe elemento,
não sendo lançada nenhuma exceção.
--------------

Arrays.fill(a2, 3):
Preenche cada índice do array, com o valor 3;

--------------

Arrays e MATRIZES começam do índice 0.

--------------

Isso compila:
int element = array[index = 1]++;

--------------

Declarações incorretas de Array com var:

var a1[] = new int[]{1, 2};
var a2[] = {1, 2};
var a3 = {1, 2};

--------------

Arrays de tipos primitivos não ficam nulos na inicialização, por exemplo:

int[] array2 = new int[5];
Aqui o array é: [0,0,0,0,0]

--------------

Porém aqui, a matriz na linha 1 será nula:

int[][] matrix = new int[2][];
matrix[0] = new int[]{1, 2};

--------------

Arrays.copyOfRange(array1, 1, 3);

Vai copiar da posição 0 até a posição 2.
início: inclusive
final: exclusive

--------------

Arrays.sort(array, 1, 3)
1 * @param fromIndex the index of the first element (inclusive) to be sorted
3 * @param toIndex the index of the last element (exclusive) to be sorted

--------------

Arrays.compare:

String[] array1 = {"1", "2", "3"};
String[] array2 = {};
String[] array3 = null;
Object o1 = Arrays.compare(array1, array2);
Object o2 = Arrays.compare(array2, array3);
Object o3 = Arrays.compare(array3, array1);
System.out.println(o1 + " " + o2 + " " + o3);

Neste exemplo acima, o resultado é:
3 1 -1

Quando um dos valores é nulo o resultado 1 ou -1
Se forem iguais, o resultado é zero
Se ambos forem diferentes de nulo, o resultado é a diferença da quantidade de elementos.