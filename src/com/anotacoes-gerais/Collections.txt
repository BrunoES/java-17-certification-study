List.of():
Sem parâmetros, retorna uma nova lista vazia.

--------------
List.add:

O construtor new ArrayList<>(int) do ArrayList recebe a initialCapacity da lista, não sendo um elemento
sendo adicionado.

List<Integer> list = new ArrayList<>(1);
list.add(2);
list.add(3);
System.out.println(list);
Saída: [2, 3]

--------------

List.add(index, element):
'Encaixa' o elemento naquela posição, sem substituir o valor anterior. Joga o valor anterior para o próximo índice, e adiciona.

diferentemente do set(index, element), que simplesmente substitui.

--------------

List.add(2, 1): Adiciona o elemento 1, no index 2.

** Add retorna true / false;
--------------

o construtor new ArrayList<>(List.of("A", "B")) aceita uma lista como parâmetro.
		List<String> list = new ArrayList<>(List.of("A", "B"));

--------------

O método list.removeAll(List.of("B", "C")) aceita uma lista como parâmetro.

--------------

O new ArrayList<>() retorna uma nova arrayList de object, portanto isso compila:
var list = new ArrayList<>(); // Line 1

--------------

* Importante *
Quando uma lista é criada a partir de Arrays.asList(array), exemplo:
Integer[] array = {1, 2};
List<Integer> list = Arrays.asList(array);

O array é passado por referência, e toda alteração feita na lista, reflete no array.
ex: list.set(0, 2);

Irá atribuir 2, na posição 0 do array

--------------
List.remove

List.remove(0) -> Retorna elemento removido
List.remove(Object =) -> Retorna true ou false se removeu

--------------
List.remove

// Remove elemento Integer que tenha valor 1:

Integer num = 1;
numbers.remove(num);

// Remove elemento no índice 1:
numbers.remove(1);

--------------

List.retainAll(list) -> Retêm na lista apenas os elementos em comum nas duas listas,
e remove o restante.

--------------

List.of(A, B, C ..):
Cria uma lista imutável.

--------------

Uma lista aceita elementos repetidos;

--------------

Caso um remove seja feito em um elemento de referência X, e este elemente existe de forma repetida dentro da lista, apenas uma posição dele será apagada, e não as duas
embora seja o mesmo elemento 2 vezes na lista.

--------------