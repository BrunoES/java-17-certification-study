_ Não pode mais ser usado como nome de variável sozinho.

==

String arr[200] - Size não é permitido na declaração do array, ou seja, left side.

==

TextBlocks: Tem que começar na outra linha, isso não compila:
String jsonBlock = """ teste """;

==

TextBlocks: Não é possível um textblock dentro do outro.

==

Declaração de tipo abstrato:
Valores nulos, não se pode somar.
Integer i;
Double j;

System.out.println(i + j);

==

Declaração de arrays:
var arr1 = new int[] {};
String[] arr2 = new String[] {};

== 

Float: No java, por padrão todo número fracionado é double, porém com o sufixo f, a gente diz que ele tem que ser float.

==

Variáveis não inicializadas, só podem ser utilizadas em atribuições.

==

null instanceof Object retorna false:
System.out.println((null instanceof Object)); // false
System.out.println(("" instanceof Object)); // true

==

Ao tentar somar null + valor, o resultado será um NullPointerException.

==

Caso tenha uma variável chamada _5, em uma expressão, o valor _5 terá prioridade sobre a variável;
int _5 = 10;
int z = _5;

System.out.println(_5 / z);

==

// | = Sem short circuit
// || = Com short circuit

Boolean b = true;
if(b || foo.timeConsumingCall()) {
   //we entered without calling timeConsumingCall()
}

==

O sinal "-", é o único que pode ser unário e aritimético ao mesmo tempo, ex:

var = - 10   // unário
var = 10 -5  // aritimético

==

stdout que formata:
System.out.format("%d \n", 1);
System.out.printf("%d \n", 1);

==

Cria Integer através de string, aceita decimal, hexadecimal e octal.
Integer.decode("1");

==


// Comparação Integer x int
Integer abc = 1;
int abz = 1;
System.out.println(abc == abz);
// Retorna true pq abz é primitivo, então o Java faz o unbox do Integer, e transforma ele em int.

==

Integer i = Integer.parseInt("-127");
i++; // Retorna um novo Integer incrementado
Wrapper classes are immuable.

==

Gerador de números randômico criptograficamente seguro.
java.security.SecureRandom

Factory: Random GeneratorFactory

==

Switch case can accept variables that can be automatically promoted to an int.
Não inclui: float, double, long.

==

Java TreeSet:
Java TreeSet class implements the Set interface that uses a tree for storage
Não permite registro duplicado.

==

Pattern mathing não suporta tipos primitivos.

==

Abstract and syncronized cannot stay together, a method cannot be abstract and synchronized at the same time.

==

ArrayList.trimtoSize():
The trimToSize() method of ArrayList in Java trims the capacity of an ArrayList instance to be the list’s current size. This method is used to trim an ArrayList instance to the number of elements it contains.

==

Function.identify
Always return the value received by parameter;

==

try-with-resources:
Resources are closed in the reverse order of their creation;
Todo resource IO ou Connection com banco é fechado antes de qualquer (final do try) catch ou finally em um try-with-resources.

==

Poder ter um try-with-resources sem catch ou finally:

try (FileInputStream fis = new FileInputStream("")) {
	System.out.println("e");
} 

Não poder ter um try normal sem catch ou finally:

try {
	System.out.println("e");
}

==

Uma record class nunca pode extender de outra, ela sempre extende de java.lang.Record.

==

Case:
 
Em um swtich case tradicional, caso um case dê match, dodos os cases abaixo serão executados, até encontrar um break;

==

Uma interface não pode sobrescrever um método equals ou hashCode por exemplo.

==

Não pode ter tipo primitivo em cases com pattern matching.

==

Desde o Java 8, é permitido ter classes locais dentro de métodos que acessam variáveis locais final do método onde estão declaradas.

==

Stream peek:
Stream peek() method is an intermediate operation.
It returns a Stream consisting of the elements of current stream.
It additionally perform the provided action on each element as elements.
For parallel stream pipelines, the action may be called at whatever time and in whatever thread the element is made available by the upstream operation.
If the action modifies shared state, it is itself responsible for providing the required synchronization.
peek() exists mainly to support debugging, where we want to see the elements as they flow past a certain point in a pipeline.

==

Declaração de arrys?

var [] i = new int[2] {1, 2}; = Incorreto, se você fornece o tamanho, não fornece os elementos para inicialização, ou vice versa.
var [] i = new int[2];                       - Correto
var [] i = new int[] {1, 2};                 - Correto
var i = new int[][] { {1, 2, 3}, {4, 5, 6} } - Correto

==

Default methods de interfaces não podem ser sobrescritos.

==

Supressed Exceptions?

==

if (o instanceof String s) {
 // Variável s só existe no bloco IF
} else {

}

==

switch excperessions não precisam de break;

==

BinaryOperator.maxBy(método utiliado para definir o max);

==

ThreeMap

pollFirstEntry - Remove primeiro elemento, ordenado crescentemente pela chave String.
pollLastEntry - Remove primeiro elemento, ordenado crescentemente pela chave String.

==

Classes não mapeadas numa sealed class podem extendê-la, desde que sejam final.

==

Deste o java 7 apenas tipos primitivos que podem ser promovidos à int são aceitos no switch case.
byte
short
char
int
enum
String

Logo, long, float e double, não são aceitos.

==



==