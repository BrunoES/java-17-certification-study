_ Não pode mais ser usado como nome de variável sozinho.

==

String arr[200] - Size não é permitido na declaração do array, ou seja, left side.

==

TextBlocks: Tem que começar na outra linha, isso não compila:
String jsonBlock = """ teste """;

==

TextBlocks: Não é possível um textblock dentro do outro.

==

Declaração de tipo abstrato:
Valores nulos, não se pode somar.
Integer i;
Double j;

System.out.println(i + j);

==

Declaração de arrays:
var arr1 = new int[] {};
String[] arr2 = new String[] {};

== 

Float: No java, por padrão todo número fracionado é double, porém com o sufixo f, a gente diz que ele tem que ser float.

==

Variáveis não inicializadas, só podem ser utilizadas em atribuições.

==

null instanceof Object retorna false:
System.out.println((null instanceof Object)); // false
System.out.println(("" instanceof Object)); // true

==

Ao tentar somar null + valor, o resultado será um NullPointerException.

==

Caso tenha uma variável chamada _5, em uma expressão, o valor _5 terá prioridade sobre a variável;
int _5 = 10;
int z = _5;

System.out.println(_5 / z);

==

// | = Sem short circuit
// || = Com short circuit

Boolean b = true;
if(b || foo.timeConsumingCall()) {
   //we entered without calling timeConsumingCall()
}

==

O sinal "-", é o único que pode ser unário e aritimético ao mesmo tempo, ex:

var = - 10   // unário
var = 10 -5  // aritimético

==

stdout que formata:
System.out.format("%d \n", 1);
System.out.printf("%d \n", 1);

==

Cria Integer através de string, aceita decimal, hexadecimal e octal.
Integer.decode("1");

==


// Comparação Integer x int
Integer abc = 1;
int abz = 1;
System.out.println(abc == abz);
// Retorna true pq abz é primitivo, então o Java faz o unbox do Integer, e transforma ele em int.

==

Integer i = Integer.parseInt("-127");
i++; // Retorna um novo Integer incrementado
Wrapper classes are immuable.

==

Gerador de números randômico criptograficamente seguro.
java.security.SecureRandom

Factory: Random GeneratorFactory

==



==
